function varargout = LFD_MPIV_Interface_export(varargin)
%LFD_MPIV_INTERFACE_EXPORT M-file for LFD_MPIV_Interface_export.fig
%      LFD_MPIV_INTERFACE_EXPORT, by itself, creates a new LFD_MPIV_INTERFACE_EXPORT or raises the existing
%      singleton*.
%
%      H = LFD_MPIV_INTERFACE_EXPORT returns the handle to a new LFD_MPIV_INTERFACE_EXPORT or the handle to
%      the existing singleton*.
%
%      LFD_MPIV_INTERFACE_EXPORT('Property','Value',...) creates a new LFD_MPIV_INTERFACE_EXPORT using the
%      given property value pairs. Unrecognized properties are passed via
%      varargin to LFD_MPIV_Interface_export_OpeningFcn.  This calling syntax produces a
%      warning when there is an existing singleton*.
%
%      LFD_MPIV_INTERFACE_EXPORT('CALLBACK') and LFD_MPIV_INTERFACE_EXPORT('CALLBACK',hObject,...) call the
%      local function named CALLBACK in LFD_MPIV_INTERFACE_EXPORT.M with the given input
%      arguments.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help LFD_MPIV_Interface_export

% Last Modified by GUIDE v2.5 10-Feb-2017 16:51:59

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @LFD_MPIV_Interface_export_OpeningFcn, ...
    'gui_OutputFcn',  @LFD_MPIV_Interface_export_OutputFcn, ...
    'gui_LayoutFcn',  @LFD_MPIV_Interface_export_LayoutFcn, ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before LFD_MPIV_Interface_export is made visible.
function LFD_MPIV_Interface_export_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   unrecognized PropertyName/PropertyValue pairs from the
%            command line (see VARARGIN)

% Choose default command line output for LFD_MPIV_Interface_export
if numel(varargin)<1
handles.dflt_folder=[];
else
handles.dflt_folder=varargin{1};
end

handles.output = hObject;
handles.IntWin=[64 32 16 16];
handles.overlap=repmat(50,[1 numel(handles.IntWin)]);
handles.cumulcross=1;
handles.ttl_folder=[];
handles.acq_freq=5;
handles.act_freq=0;
handles.nb_phases=1;
handles.case_name='test_data';
handles.roi=[];
handles.deltat=3;
handles.scale=0.0038;
handles.the_date=datestr(now,'yyyymmdd');
handles.export_folder=pwd;
handles.export_vectors=handles.case_name;

handles.cxd_folder=[];
handles.cxd=[];

handles.expe=[];
if numel(varargin)==2
    handles.expe=varargin{2};
    display_expe(handles);
end



update_PIV_options(handles);
update_synchro_options(handles);
update_images_options(handles);
update_export_options(handles);
% Update handles structure
guidata(hObject, handles);
set(hObject,'closeRequestFcn',[])

% UIWAIT makes LFD_MPIV_Interface_export wait for user response (see UIRESUME)
 uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = LFD_MPIV_Interface_export_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
set(hObject,'closeRequestFcn','closereq');
% Get default command line output from handles structure
varargout{1} = handles.expe;
close(hObject);


% --- Executes on selection change in list_cxd.
function list_cxd_Callback(hObject, eventdata, handles)
% hObject    handle to list_cxd (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns list_cxd contents as cell array
%        contents{get(hObject,'Value')} returns selected item from list_cxd


% --- Executes during object creation, after setting all properties.
function list_cxd_CreateFcn(hObject, eventdata, handles)
% hObject    handle to list_cxd (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in set_cxd_button.
function set_cxd_button_Callback(hObject, eventdata, handles)
% hObject    handle to set_cxd_button (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles.cxd_folder=uigetdir(handles.dflt_folder);
d1=dir(fullfile(handles.cxd_folder,'*.cxd'));
d2=dir(fullfile(handles.cxd_folder,'*.CXD'));
d=[d1 d2];
handles.cxd=cell(1,numel(d));
for i=1:numel(d)
    handles.cxd{i}=d(i).name;
end
set(handles.list_cxd,'String',handles.cxd,'Max',numel(d));
guidata(hObject,handles);




% --- Executes on selection change in list_expe.
function list_expe_Callback(hObject, eventdata, handles)
% hObject    handle to list_expe (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns list_expe contents as cell array
%        contents{get(hObject,'Value')} returns selected item from list_expe


% --- Executes during object creation, after setting all properties.
function list_expe_CreateFcn(hObject, eventdata, handles)
% hObject    handle to list_expe (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in edt_PIV.
function edt_PIV_Callback(hObject, eventdata, handles)
% hObject    handle to edt_PIV (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
options=Inter_PIV_options(handles.IntWin,handles.overlap);
opt_fields=fieldnames(options);
for i=1:numel(opt_fields);
    handles.(opt_fields{i})=options.(opt_fields{i});
end
update_PIV_options(handles);
guidata(hObject,handles);

function update_PIV_options(handles);
if handles.cumulcross==1
    PIV_mode='Cumulative';
else
    PIV_mode='Single';
end
text_PIV=sprintf('%s cross-correlation\n%d passes\n',...
    PIV_mode,numel(handles.IntWin));
for i=1:numel(handles.IntWin)
    text_PIV=sprintf('%s %dx%d %d%% overlap\n',text_PIV,handles.IntWin(i),handles.IntWin(i),handles.overlap(i));
end

set(handles.text_PIV_options,'String',text_PIV);




% --- Executes on button press in synchro_bttn.
function synchro_bttn_Callback(hObject, eventdata, handles)
% hObject    handle to synchro_bttn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
idx_selected_cxd=get(handles.list_cxd,'Value');
cxd=get(handles.list_cxd,'String');

options=Inter_synchro(handles.ttl_folder,handles.acq_freq,handles.act_freq,handles.nb_phases,cxd(idx_selected_cxd));
opt_fields=fieldnames(options);
for i=1:numel(opt_fields);
    handles.(opt_fields{i})=options.(opt_fields{i});
end
update_synchro_options(handles);
guidata(hObject,handles);

function update_synchro_options(handles);
if ~isempty(handles.ttl_folder)
    synchro_mode='TTL';
else
    synchro_mode='Frequency';
end
text_PIV=sprintf('%s synchronisation\n%d passes\n',synchro_mode);
if strcmp(synchro_mode,'TTL')
text_PIV=sprintf('%sFolder: %s\n',text_PIV,handles.ttl_folder);
else
text_PIV=sprintf('%sAcq. Freq: %5.2f Hz\n',text_PIV,handles.acq_freq);
end
text_PIV=sprintf('%sAct. Freq: %5.2f Hz\n',text_PIV,handles.act_freq);
text_PIV=sprintf('%sNb of phases: %d',text_PIV,handles.nb_phases);
set(handles.synchro_txt,'String',text_PIV);


% --- Executes on button press in im_setting_bttn.
function im_setting_bttn_Callback(hObject, eventdata, handles)
% hObject    handle to im_setting_bttn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
options=Inter_im_options(handles.case_name,handles.deltat,handles.scale,handles.roi,handles.the_date);
opt_fields=fieldnames(options);
for i=1:numel(opt_fields);
    handles.(opt_fields{i})=options.(opt_fields{i});
end
update_images_options(handles);
guidata(hObject,handles);

function update_images_options(handles);
if ~isempty(handles.the_date)
    case_name=sprintf('%s-%s',handles.the_date,handles.case_name);
else
     case_name=handles.case_name;
end
text_PIV=sprintf('Name: %s\n',case_name);

text_PIV=sprintf('%sScale (mum/pixel): %f\n',text_PIV,handles.scale);

text_PIV=sprintf('%sDelta t (mus): %f\n',text_PIV,handles.deltat);

text_PIV=sprintf('%sROI: %s \n',text_PIV,sprintf('%d ',handles.roi));
set(handles.im_list,'String',text_PIV);

% --- Executes on selection change in im_list.
function im_list_Callback(hObject, eventdata, handles)
% hObject    handle to im_list (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns im_list contents as cell array
%        contents{get(hObject,'Value')} returns selected item from im_list


% --- Executes during object creation, after setting all properties.
function im_list_CreateFcn(hObject, eventdata, handles)
% hObject    handle to im_list (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in add_selec_bttn.
function add_selec_bttn_Callback(hObject, eventdata, handles)
% hObject    handle to add_selec_bttn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles.height=Inter_field_height(handles.cxd,get(handles.list_cxd,'Value'));
handles.expe=add_expe_structure(handles.expe,handles);
display_expe(handles);
guidata(hObject,handles);



function expe=add_expe_structure(old_expe,handles)
%get number of cxd files
idx=get(handles.list_cxd,'Value');
expe=repmat(struct,[1 numel(idx)]);

%create structure
fields_to_include={'IntWin','overlap','cumulcross','ttl_folder','acq_freq',...
    'act_freq','nb_phases','roi','deltat','scale'}
for i=1:numel(idx)
    if ~isempty(handles.the_date)
        expe(i).case_name=sprintf('%s-%s',handles.the_date,handles.case_name);
    else
        expe(i).case_name=handles.case_name;
    end
    for j=1:numel(fields_to_include);
        expe(i).(fields_to_include{j})=handles.(fields_to_include{j});
    end
    expe(i).height=handles.height(i);
    expe(i).cxd_file=fullfile(handles.cxd_folder,handles.cxd{idx(i)});
end
expe=[old_expe expe];

function display_expe(handles)
expe_list=cell(1,numel(handles.expe));
for i=1:numel(handles.expe);
    [~,cxd,~]=fileparts(handles.expe(i).cxd_file);
    expe_list{i}=sprintf('%d: %s,',i,cxd);
    expe_list{i}=sprintf('%s %s',expe_list{i},handles.expe(i).case_name);
    expe_list{i}=sprintf('%s y=%.2f',expe_list{i},handles.expe(i).height);
    expe_list{i}=sprintf('%s (IntWin:%s, %d%% ',expe_list{i},sprintf('%d ',handles.expe(i).IntWin),handles.expe(i).overlap(1));
    if isempty(handles.expe(i).ttl_folder)
        expe_list{i}=sprintf('%s Acq. Feq.: %.2f',expe_list{i},handles.expe(i).acq_freq);
    else
        expe_list{i}=sprintf('%s Acq. Sync. TTL',expe_list{i});
    end
        
    
    
end

idx=get(handles.list_expe,'Value');
idx(idx>numel(handles.expe))=numel(handles.expe);
idx(idx<1)=1;
idx=unique(idx);
set(handles.list_expe,'String',expe_list,'Value',idx,'Max',numel(expe_list));


% --- Executes on button press in remove_bttn.
function remove_bttn_Callback(hObject, eventdata, handles)
% hObject    handle to remove_bttn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
idx=get(handles.list_expe,'Value');
handles.expe=handles.expe(setxor(idx,1:numel(handles.expe)));

display_expe(handles);
guidata(hObject,handles);


% --- Executes on button press in close_bttn.
function close_bttn_Callback(hObject, eventdata, handles)
% hObject    handle to close_bttn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
uiresume;


% --- Executes on button press in export_bttn.
function export_bttn_Callback(hObject, eventdata, handles)
% hObject    handle to export_bttn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% hObject    handle to im_setting_bttn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
options=Inter_export(handles.export_folder,handles.export_vectors,handles.case_name);
opt_fields=fieldnames(options);
for i=1:numel(opt_fields);
    handles.(opt_fields{i})=options.(opt_fields{i});
end
update_export_options(handles);
guidata(hObject,handles);

function update_export_options(handles);
text_PIV=sprintf('Folder: %s\n',handles.export_folder);
text_PIV=sprintf('%sFilename: %s\n',text_PIV,handles.export_vectors);

set(handles.export_list,'String',text_PIV);


% --- Executes on selection change in export_list.
function export_list_Callback(hObject, eventdata, handles)
% hObject    handle to export_list (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns export_list contents as cell array
%        contents{get(hObject,'Value')} returns selected item from export_list


% --- Executes during object creation, after setting all properties.
function export_list_CreateFcn(hObject, eventdata, handles)
% hObject    handle to export_list (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in PIV_bttn.
function PIV_bttn_Callback(hObject, eventdata, handles)
% hObject    handle to PIV_bttn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
expe=handles.expe;
if ~isempty(expe)
    case_name_collection={};
    for i=1:length(expe);
        if ~any(strcmp(case_name_collection,expe(i).case_name))
        case_name_collection{numel(case_name_collection)+1}=expe(i).case_name;        
        end
    end
    
    for i_case=1:length(case_name_collection)
        this_expe_idx=zeros(1,length(expe));
        this_y=zeros(1,length(expe));
        for i=1:length(expe);
            if strcmp(case_name_collection{i_case},expe(i).case_name)
                this_expe_idx(i)=1;
                this_y(i)=expe(i).height;
            end
        end
        this_case_expe=expe(this_expe_idx>0);
        [this_y,sort_idx]=sort(this_y(this_expe_idx>0));
        this_case_expe=this_case_expe(sort_idx);
        
        for i_height = 1:numel(this_y)
            data=LFD_MPIV_cxd_to_vectors(this_case_expe(i_height));
            if i_height==1
                data_3D_phase.x=repmat(data.x,[1 1 length(this_y)]);
                data_3D_phase.z=repmat(data.z,[1 1 length(this_y)]);
                data_3D_phase.y=repmat(permute(this_y,[1 3 2]),[size(data_3D_phase.x,1) size(data_3D_phase.x,2)]);
                data_3D_phase.u=repmat(data_3D_phase.y*0,[1 1 1 size(data.u,3)]);
                data_3D_phase.v=repmat(data_3D_phase.y*0,[1 1 1 size(data.u,3)]);
                data_3D_phase.w=repmat(data_3D_phase.y*0,[1 1 1 size(data.u,3)]);
            end
            data_3D_phase.u(:,:,i_height,:)=permute(data.u,[1 2 4 3]);
            data_3D_phase.w(:,:,i_height,:)=permute(data.w,[1 2 4 3]);
        end
        
        save(sprintf('%s.mat',case_name_collection{i_case}),'data_3D_phase')
        clear data_3D_phase
        
        
    end
        
                
        
    
end




    













% --- Creates and returns a handle to the GUI figure. 
function h1 = LFD_MPIV_Interface_export_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end

appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'text', 21, ...
    'listbox', 7, ...
    'pushbutton', 12, ...
    'edit', 18, ...
    'checkbox', 8, ...
    'radiobutton', 2, ...
    'uipanel', 2, ...
    'axes', 2, ...
    'popupmenu', 2), ...
    'override', 0, ...
    'release', [], ...
    'resize', 'none', ...
    'accessibility', 'callback', ...
    'mfile', [], ...
    'callbacks', [], ...
    'singleton', [], ...
    'syscolorfig', [], ...
    'blocking', 0, ...
    'lastSavedFile', '/home/thomas/Dropbox/microflux-GPC/PIV/LFD_MPIV_quick_PIV/private/LFD_MPIV_Interface_export.m', ...
    'lastFilename', '/home/thomas/Dropbox/microflux-GPC/PIV/LFD_MPIV_quick_PIV/LFD_MPIV_Interface.fig');
appdata.lastValidTag = 'figure1';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'figure1');

h1 = figure(...
'PaperUnits','inches',...
'Units','characters',...
'Position',[135.714285714286 37 171.428571428571 39.9375],...
'Visible',get(0,'defaultfigureVisible'),...
'Color',get(0,'defaultfigureColor'),...
'CurrentAxesMode','manual',...
'IntegerHandle','off',...
'MenuBar','none',...
'Name','LFD_MPIV_Interface',...
'NumberTitle','off',...
'Resize','off',...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'PaperSize',[8.5 11],...
'PaperSizeMode',get(0,'defaultfigurePaperSizeMode'),...
'PaperType','usletter',...
'PaperTypeMode',get(0,'defaultfigurePaperTypeMode'),...
'PaperUnitsMode',get(0,'defaultfigurePaperUnitsMode'),...
'ScreenPixelsPerInchMode','manual',...
'ChildrenMode','manual',...
'ParentMode','manual',...
'HandleVisibility','callback',...
'Tag','figure1',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'axes1';

h2 = axes(...
'Parent',h1,...
'FontUnits',get(0,'defaultaxesFontUnits'),...
'Units','characters',...
'CameraMode',get(0,'defaultaxesCameraMode'),...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'CameraTarget',[0.5 0.5 0.5],...
'CameraTargetMode',get(0,'defaultaxesCameraTargetMode'),...
'CameraViewAngle',6.60861036031192,...
'CameraViewAngleMode',get(0,'defaultaxesCameraViewAngleMode'),...
'Position',[71.2857142857143 2.3125 57.2857142857143 11.375],...
'ActivePositionProperty','position',...
'ActivePositionPropertyMode',get(0,'defaultaxesActivePositionPropertyMode'),...
'LooseInset',[22.2857142857143 4.393125 16.2857142857143 2.9953125],...
'LooseInsetMode',get(0,'defaultaxesLooseInsetMode'),...
'DataSpaceMode',get(0,'defaultaxesDataSpaceMode'),...
'PlotBoxAspectRatio',[1 0.453865336658354 0.453865336658354],...
'PlotBoxAspectRatioMode',get(0,'defaultaxesPlotBoxAspectRatioMode'),...
'ColorSpaceMode',get(0,'defaultaxesColorSpaceMode'),...
'ChildContainerMode',get(0,'defaultaxesChildContainerMode'),...
'DecorationContainerMode',get(0,'defaultaxesDecorationContainerMode'),...
'XRulerMode',get(0,'defaultaxesXRulerMode'),...
'XTick',[0 0.2 0.4 0.6 0.8 1],...
'XTickMode',get(0,'defaultaxesXTickMode'),...
'XTickLabel',{  '0'; '0.2'; '0.4'; '0.6'; '0.8'; '1' },...
'XTickLabelMode',get(0,'defaultaxesXTickLabelMode'),...
'XBaselineMode',get(0,'defaultaxesXBaselineMode'),...
'YRulerMode',get(0,'defaultaxesYRulerMode'),...
'YTick',[0 0.2 0.4 0.6 0.8 1],...
'YTickMode',get(0,'defaultaxesYTickMode'),...
'YTickLabel',{  '0'; '0.2'; '0.4'; '0.6'; '0.8'; '1' },...
'YTickLabelMode',get(0,'defaultaxesYTickLabelMode'),...
'YBaselineMode',get(0,'defaultaxesYBaselineMode'),...
'ZRulerMode',get(0,'defaultaxesZRulerMode'),...
'ZBaselineMode',get(0,'defaultaxesZBaselineMode'),...
'AmbientLightSourceMode',get(0,'defaultaxesAmbientLightSourceMode'),...
'SortMethod','childorder',...
'SortMethodMode',get(0,'defaultaxesSortMethodMode'),...
'Tag','axes1',...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h3 = get(h2,'title');

set(h3,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0 0 0],...
'ColorMode','auto',...
'Position',[0.500001665957253 1.01510989010989 0.499999999999998],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','bold',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'SelectionHighlight','on',...
'SelectionHighlightMode','auto',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','Axes Title',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h4 = get(h2,'xlabel');

set(h4,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0.500000476837158 -0.130036627252897 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','top',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'SelectionHighlight','on',...
'SelectionHighlightMode','auto',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','NumericRuler Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h5 = get(h2,'ylabel');

set(h5,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[-0.0756442212156723 0.500000476837158 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',90,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'SelectionHighlight','on',...
'SelectionHighlightMode','auto',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','NumericRuler Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h6 = get(h2,'zlabel');

set(h6,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0 0 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',10,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','left',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','middle',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'SelectionHighlight','on',...
'SelectionHighlightMode','auto',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','NumericRuler Label',...
'DescriptionMode','auto',...
'Visible','off',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

appdata = [];
appdata.lastValidTag = 'text20';

h7 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Pending operations',...
'Style','text',...
'Position',[85.5714285714286 36.6875 50.1428571428572 2.5],...
'Children',[],...
'ParentMode','manual',...
'Tag','text20',...
'FontSize',20,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'list_cxd';

h8 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','CXD files',...
'Style','listbox',...
'Value',[],...
'ValueMode',get(0,'defaultuicontrolValueMode'),...
'Position',[2.85714285714286 5.5 25.5714285714286 31.1875],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('list_cxd_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)LFD_MPIV_Interface_export('list_cxd_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','list_cxd');

appdata = [];
appdata.lastValidTag = 'set_cxd_button';

h9 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Set CXD folder',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[3.85714285714286 37.6875 17.5714285714286 1.3125],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('set_cxd_button_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','set_cxd_button');

appdata = [];
appdata.lastValidTag = 'list_expe';

h10 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Pending PIV',...
'Style','listbox',...
'Value',[],...
'ValueMode',get(0,'defaultuicontrolValueMode'),...
'Position',[66 14.8125 98.1428571428571 21.9375],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('list_expe_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)LFD_MPIV_Interface_export('list_expe_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','list_expe');

appdata = [];
appdata.lastValidTag = 'edt_PIV';

h11 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','PIV Settings',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[29.8571428571429 29.375 18 2.0625],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('edt_PIV_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','edt_PIV');

appdata = [];
appdata.lastValidTag = 'text_PIV_options';

h12 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'HorizontalAlignment','left',...
'String','PIV Settings',...
'Style','listbox',...
'Value',[],...
'Position',[29.8571428571429 20.75 34.4285714285714 8.5625],...
'BackgroundColor',[0.94 0.94 1],...
'Children',[],...
'Enable','inactive',...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','text_PIV_options');

appdata = [];
appdata.lastValidTag = 'synchro_bttn';

h13 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Synchro settings',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[29.8571428571429 36.875 18 2.0625],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('synchro_bttn_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','synchro_bttn');

appdata = [];
appdata.lastValidTag = 'synchro_txt';

h14 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'HorizontalAlignment','left',...
'String','Synchro settings',...
'Style','listbox',...
'Value',[],...
'ValueMode',get(0,'defaultuicontrolValueMode'),...
'Position',[29.8571428571429 31.6875 34.4285714285714 5.1875],...
'BackgroundColor',[0.94 0.94 1],...
'Children',[],...
'ParentMode','manual',...
'Tag','synchro_txt',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'im_setting_bttn';

h15 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Image Settings',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[29.8571428571429 18.5 18 2.0625],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('im_setting_bttn_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','im_setting_bttn');

appdata = [];
appdata.lastValidTag = 'add_selec_bttn';

h16 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Add selected',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[4.14285714285714 0.6875 22.8571428571429 4.0625],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('add_selec_bttn_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','add_selec_bttn');

appdata = [];
appdata.lastValidTag = 'im_list';

h17 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'HorizontalAlignment','left',...
'String','Image Settings',...
'Style','listbox',...
'Value',[],...
'Position',[29.8571428571429 9.875 34.4285714285714 8.5625],...
'BackgroundColor',[0.94 0.94 1],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('im_list_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Enable','inactive',...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)LFD_MPIV_Interface_export('im_list_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','im_list');

appdata = [];
appdata.lastValidTag = 'remove_bttn';

h18 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Remove selected',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[139.714285714286 10.25 22.8571428571429 4.0625],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('remove_bttn_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','remove_bttn');

appdata = [];
appdata.lastValidTag = 'close_bttn';

h19 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Export settings and close',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[135.428571428571 1.5 28.7142857142857 3.1875],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('close_bttn_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','close_bttn');

appdata = [];
appdata.lastValidTag = 'export_bttn';

h20 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Export Settings',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[29.7142857142857 7.1875 18 2.0625],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('export_bttn_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','export_bttn');

appdata = [];
appdata.lastValidTag = 'export_list';

h21 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'HorizontalAlignment','left',...
'String','Export Settings',...
'Style','listbox',...
'Value',[],...
'Position',[29.7142857142857 0.625 34.4285714285714 6.4375],...
'BackgroundColor',[0.94 0.94 1],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('export_list_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Enable','inactive',...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)LFD_MPIV_Interface_export('export_list_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','export_list');

appdata = [];
appdata.lastValidTag = 'PIV_bttn';

h22 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Achieve PIV and close',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[135.428571428571 5.5 28.7142857142857 3.1875],...
'Callback',@(hObject,eventdata)LFD_MPIV_Interface_export('PIV_bttn_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','PIV_bttn');


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % LFD_MPIV_INTERFACE_EXPORT
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % LFD_MPIV_INTERFACE_EXPORT(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % LFD_MPIV_INTERFACE_EXPORT('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % LFD_MPIV_INTERFACE_EXPORT(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~ishghandle(fig,'figure')
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || (isscalar(fig)&&isprop(fig,'GUIDEFigure'));
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishghandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI M-file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    % Call version of openfig that accepts 'auto' option"
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton, visible);  
%     %workaround for CreateFcn not called to create ActiveX
%     if feature('HGUsingMATLABClasses')
%         peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
%         for i=1:length(peers)
%             if isappdata(peers(i),'Control')
%                 actxproxy(peers(i));
%             end            
%         end
%     end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishghandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end


